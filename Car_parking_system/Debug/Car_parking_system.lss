
Car_parking_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000031e4  00003278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800188  00800188  000033a0  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  000033a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6f  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 57       	subi	r30, 0x78	; 120
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
//Needed variable
uint16 distance=0;

//main Function
int main (void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24

	//initial values
	flags.stop=0;
     e44:	80 91 8f 01 	lds	r24, 0x018F
     e48:	8e 7f       	andi	r24, 0xFE	; 254
     e4a:	80 93 8f 01 	sts	0x018F, r24

	/*call init functions*/
	LEDS_init();
     e4e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LEDS_init>
	Ultrasonic_init();
     e52:	0e 94 18 17 	call	0x2e30	; 0x2e30 <Ultrasonic_init>
	LCD_init();
     e56:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_init>
	Buzzer_init();
     e5a:	0e 94 e5 07 	call	0xfca	; 0xfca <Buzzer_init>

	//LCD Start up
	//LCD clear screen
	LCD_clearScreen();
     e5e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <LCD_clearScreen>
	//LCD write text massage
	LCD_displayStringRowColumn(0,0,"Distance = XXXcm");
     e62:	20 e6       	ldi	r18, 0x60	; 96
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayStringRowColumn>
	while(1)
	{
		//Measure the distance
		distance= Ultrasonic_readDistance();
     e70:	0e 94 0e 18 	call	0x301c	; 0x301c <Ultrasonic_readDistance>
     e74:	90 93 89 01 	sts	0x0189, r25
     e78:	80 93 88 01 	sts	0x0188, r24
		//LCD show distance
		LCD_moveCursor(0,11);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	6b e0       	ldi	r22, 0x0B	; 11
     e80:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_moveCursor>
		LCD_intgerToString(distance);
     e84:	80 91 88 01 	lds	r24, 0x0188
     e88:	90 91 89 01 	lds	r25, 0x0189
     e8c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_intgerToString>
		if(distance<10)
     e90:	80 91 88 01 	lds	r24, 0x0188
     e94:	90 91 89 01 	lds	r25, 0x0189
     e98:	8a 30       	cpi	r24, 0x0A	; 10
     e9a:	91 05       	cpc	r25, r1
     e9c:	28 f4       	brcc	.+10     	; 0xea8 <main+0x7a>
		{
			LCD_displayString("  ");
     e9e:	81 e7       	ldi	r24, 0x71	; 113
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <LCD_displayString>
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <main+0x8e>
		}
		else if(distance<100)
     ea8:	80 91 88 01 	lds	r24, 0x0188
     eac:	90 91 89 01 	lds	r25, 0x0189
     eb0:	84 36       	cpi	r24, 0x64	; 100
     eb2:	91 05       	cpc	r25, r1
     eb4:	18 f4       	brcc	.+6      	; 0xebc <main+0x8e>
		{
			LCD_displayCharacter(' ');
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_displayCharacter>
		}

		//Leds & buzzer condition

		if(distance > 20)
     ebc:	80 91 88 01 	lds	r24, 0x0188
     ec0:	90 91 89 01 	lds	r25, 0x0189
     ec4:	85 31       	cpi	r24, 0x15	; 21
     ec6:	91 05       	cpc	r25, r1
     ec8:	60 f0       	brcs	.+24     	; 0xee2 <main+0xb4>
		{
			LED_off(RED);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			LED_off(GREEN);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			LED_off(BLUE);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			Buzzer_off();
     edc:	0e 94 02 08 	call	0x1004	; 0x1004 <Buzzer_off>
     ee0:	c7 cf       	rjmp	.-114    	; 0xe70 <main+0x42>
		}
		else if(distance >= 16)
     ee2:	80 91 88 01 	lds	r24, 0x0188
     ee6:	90 91 89 01 	lds	r25, 0x0189
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	91 05       	cpc	r25, r1
     eee:	60 f0       	brcs	.+24     	; 0xf08 <main+0xda>
		{
			LED_on(RED);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_off(GREEN);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			LED_off(BLUE);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			Buzzer_off();
     f02:	0e 94 02 08 	call	0x1004	; 0x1004 <Buzzer_off>
     f06:	b4 cf       	rjmp	.-152    	; 0xe70 <main+0x42>
		}
		else if(distance >= 11)
     f08:	80 91 88 01 	lds	r24, 0x0188
     f0c:	90 91 89 01 	lds	r25, 0x0189
     f10:	8b 30       	cpi	r24, 0x0B	; 11
     f12:	91 05       	cpc	r25, r1
     f14:	60 f0       	brcs	.+24     	; 0xf2e <main+0x100>
		{
			LED_on(RED);
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_on(GREEN);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_off(BLUE);
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			Buzzer_off();
     f28:	0e 94 02 08 	call	0x1004	; 0x1004 <Buzzer_off>
     f2c:	a1 cf       	rjmp	.-190    	; 0xe70 <main+0x42>
		}
		else if(distance >= 6)
     f2e:	80 91 88 01 	lds	r24, 0x0188
     f32:	90 91 89 01 	lds	r25, 0x0189
     f36:	86 30       	cpi	r24, 0x06	; 6
     f38:	91 05       	cpc	r25, r1
     f3a:	f0 f0       	brcs	.+60     	; 0xf78 <main+0x14a>
		{
			LED_on(RED);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_on(GREEN);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_on(BLUE);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			Buzzer_off();
     f4e:	0e 94 02 08 	call	0x1004	; 0x1004 <Buzzer_off>
			if(!flags.stop)
     f52:	80 91 8f 01 	lds	r24, 0x018F
     f56:	81 70       	andi	r24, 0x01	; 1
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <main+0x130>
     f5c:	89 cf       	rjmp	.-238    	; 0xe70 <main+0x42>
			{
				//LCD delete stop
				LCD_displayStringRowColumn(1,6,"     ");
     f5e:	24 e7       	ldi	r18, 0x74	; 116
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	66 e0       	ldi	r22, 0x06	; 6
     f66:	a9 01       	movw	r20, r18
     f68:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayStringRowColumn>
				flags.stop=1;
     f6c:	80 91 8f 01 	lds	r24, 0x018F
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 93 8f 01 	sts	0x018F, r24
     f76:	7c cf       	rjmp	.-264    	; 0xe70 <main+0x42>
			}
		}
		else if(distance >= 0)
		{
			LED_off(RED);
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			LED_off(GREEN);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			LED_off(BLUE);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LED_off>
			Buzzer_off();
     f8a:	0e 94 02 08 	call	0x1004	; 0x1004 <Buzzer_off>

			LED_on(RED);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_on(GREEN);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			LED_on(BLUE);
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LED_on>
			Buzzer_on();
     fa0:	0e 94 f6 07 	call	0xfec	; 0xfec <Buzzer_on>

			if(flags.stop)
     fa4:	80 91 8f 01 	lds	r24, 0x018F
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <main+0x182>
     fae:	60 cf       	rjmp	.-320    	; 0xe70 <main+0x42>
			{
				//LCD write stop
				LCD_displayStringRowColumn(1,6,"Stop!");
     fb0:	2a e7       	ldi	r18, 0x7A	; 122
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	66 e0       	ldi	r22, 0x06	; 6
     fb8:	a9 01       	movw	r20, r18
     fba:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayStringRowColumn>
				flags.stop=0;
     fbe:	80 91 8f 01 	lds	r24, 0x018F
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	80 93 8f 01 	sts	0x018F, r24
     fc8:	53 cf       	rjmp	.-346    	; 0xe70 <main+0x42>

00000fca <Buzzer_init>:
/*
 * Description :
 * Initializes the buzzer pin direction and turn off the buzzer.
*/
void Buzzer_init(void)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	//Initializes the buzzer pin direction
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	65 e0       	ldi	r22, 0x05	; 5
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	// Turn off the buzzer
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	65 e0       	ldi	r22, 0x05	; 5
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <Buzzer_on>:
/*
 * Description :
 Activates the buzzer.
*/
void Buzzer_on(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	65 e0       	ldi	r22, 0x05	; 5
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <Buzzer_off>:
/*
 * Description :
 Deactivates the buzzer.
*/
void Buzzer_off(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	65 e0       	ldi	r22, 0x05	; 5
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <GPIO_setupPinDirection+0x6>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <GPIO_setupPinDirection+0x8>
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	6a 83       	std	Y+2, r22	; 0x02
    102e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	08 f0       	brcs	.+2      	; 0x1038 <GPIO_setupPinDirection+0x1c>
    1036:	d5 c0       	rjmp	.+426    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	08 f0       	brcs	.+2      	; 0x1040 <GPIO_setupPinDirection+0x24>
    103e:	d1 c0       	rjmp	.+418    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3d 83       	std	Y+5, r19	; 0x05
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <GPIO_setupPinDirection+0x3a>
    1054:	43 c0       	rjmp	.+134    	; 0x10dc <GPIO_setupPinDirection+0xc0>
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	3d 81       	ldd	r19, Y+5	; 0x05
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <GPIO_setupPinDirection+0x4e>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	71 f0       	breq	.+28     	; 0x1084 <GPIO_setupPinDirection+0x68>
    1068:	bc c0       	rjmp	.+376    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <GPIO_setupPinDirection+0x5a>
    1074:	5f c0       	rjmp	.+190    	; 0x1134 <GPIO_setupPinDirection+0x118>
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	9d 81       	ldd	r25, Y+5	; 0x05
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <GPIO_setupPinDirection+0x66>
    1080:	85 c0       	rjmp	.+266    	; 0x118c <GPIO_setupPinDirection+0x170>
    1082:	af c0       	rjmp	.+350    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	a1 f4       	brne	.+40     	; 0x10b2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0x8c>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0x88>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	98 c0       	rjmp	.+304    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10b2:	aa e3       	ldi	r26, 0x3A	; 58
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ea e3       	ldi	r30, 0x3A	; 58
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_setupPinDirection+0xb4>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_setupPinDirection+0xb0>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	83 c0       	rjmp	.+262    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0xe4>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0xe0>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	6c c0       	rjmp	.+216    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    110a:	a7 e3       	ldi	r26, 0x37	; 55
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e7 e3       	ldi	r30, 0x37	; 55
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0x10c>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0x108>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	57 c0       	rjmp	.+174    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x13c>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x138>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	40 c0       	rjmp	.+128    	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1162:	a4 e3       	ldi	r26, 0x34	; 52
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e4 e3       	ldi	r30, 0x34	; 52
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x164>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x160>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	2b c0       	rjmp	.+86     	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	a1 f4       	brne	.+40     	; 0x11ba <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x194>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x190>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11ba:	a1 e3       	ldi	r26, 0x31	; 49
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x1bc>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x1b8>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <GPIO_writePin+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <GPIO_writePin+0x8>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	6a 83       	std	Y+2, r22	; 0x02
    1204:	4b 83       	std	Y+3, r20	; 0x03
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	88 30       	cpi	r24, 0x08	; 8
    120a:	08 f0       	brcs	.+2      	; 0x120e <GPIO_writePin+0x1c>
    120c:	d5 c0       	rjmp	.+426    	; 0x13b8 <GPIO_writePin+0x1c6>
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	08 f0       	brcs	.+2      	; 0x1216 <GPIO_writePin+0x24>
    1214:	d1 c0       	rjmp	.+418    	; 0x13b8 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin value if it is output or turn on internal pull up on or off */
			switch(port_num)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3d 83       	std	Y+5, r19	; 0x05
    121e:	2c 83       	std	Y+4, r18	; 0x04
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <GPIO_writePin+0x3a>
    122a:	43 c0       	rjmp	.+134    	; 0x12b2 <GPIO_writePin+0xc0>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	2c f4       	brge	.+10     	; 0x1240 <GPIO_writePin+0x4e>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	71 f0       	breq	.+28     	; 0x125a <GPIO_writePin+0x68>
    123e:	bc c0       	rjmp	.+376    	; 0x13b8 <GPIO_writePin+0x1c6>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <GPIO_writePin+0x5a>
    124a:	5f c0       	rjmp	.+190    	; 0x130a <GPIO_writePin+0x118>
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <GPIO_writePin+0x66>
    1256:	85 c0       	rjmp	.+266    	; 0x1362 <GPIO_writePin+0x170>
    1258:	af c0       	rjmp	.+350    	; 0x13b8 <GPIO_writePin+0x1c6>
			{
				case PORTA_ID:
					if(value == LOGIC_HIGH)
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	a1 f4       	brne	.+40     	; 0x1288 <GPIO_writePin+0x96>
					{
						SET_BIT(PORTA,pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0x8c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0x88>
    1282:	84 2b       	or	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	98 c0       	rjmp	.+304    	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTA,pin_num);
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_writePin+0xb4>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_writePin+0xb0>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	83 c0       	rjmp	.+262    	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTB_ID:
					if(value == LOGIC_HIGH)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <GPIO_writePin+0xee>
					{
						SET_BIT(PORTB,pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0xe4>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0xe0>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	6c c0       	rjmp	.+216    	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTB,pin_num);
    12e0:	a8 e3       	ldi	r26, 0x38	; 56
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e8 e3       	ldi	r30, 0x38	; 56
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_writePin+0x10c>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_writePin+0x108>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	57 c0       	rjmp	.+174    	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTC_ID:
					if(value == LOGIC_HIGH)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a1 f4       	brne	.+40     	; 0x1338 <GPIO_writePin+0x146>
					{
						SET_BIT(PORTC,pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x13c>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x138>
    1332:	84 2b       	or	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	40 c0       	rjmp	.+128    	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTC,pin_num);
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0x164>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0x160>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	2b c0       	rjmp	.+86     	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTD_ID:
					if(value == LOGIC_HIGH)
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	a1 f4       	brne	.+40     	; 0x1390 <GPIO_writePin+0x19e>
					{
						SET_BIT(PORTD,pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x194>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x190>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTD,pin_num);
    1390:	a2 e3       	ldi	r26, 0x32	; 50
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e2 e3       	ldi	r30, 0x32	; 50
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_writePin+0x1bc>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_writePin+0x1b8>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
					}
					break;
			}
		}
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <GPIO_readPin+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <GPIO_readPin+0x8>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <GPIO_readPin+0xa>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <GPIO_readPin+0x1a>
    13e0:	85 c0       	rjmp	.+266    	; 0x14ec <GPIO_readPin+0x124>
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <GPIO_readPin+0x22>
    13e8:	81 c0       	rjmp	.+258    	; 0x14ec <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value */
		switch(port_num)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	4c 81       	ldd	r20, Y+4	; 0x04
    13f6:	5d 81       	ldd	r21, Y+5	; 0x05
    13f8:	41 30       	cpi	r20, 0x01	; 1
    13fa:	51 05       	cpc	r21, r1
    13fc:	79 f1       	breq	.+94     	; 0x145c <GPIO_readPin+0x94>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	91 05       	cpc	r25, r1
    1406:	34 f4       	brge	.+12     	; 0x1414 <GPIO_readPin+0x4c>
    1408:	2c 81       	ldd	r18, Y+4	; 0x04
    140a:	3d 81       	ldd	r19, Y+5	; 0x05
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	69 f0       	breq	.+26     	; 0x142c <GPIO_readPin+0x64>
    1412:	6c c0       	rjmp	.+216    	; 0x14ec <GPIO_readPin+0x124>
    1414:	4c 81       	ldd	r20, Y+4	; 0x04
    1416:	5d 81       	ldd	r21, Y+5	; 0x05
    1418:	42 30       	cpi	r20, 0x02	; 2
    141a:	51 05       	cpc	r21, r1
    141c:	b9 f1       	breq	.+110    	; 0x148c <GPIO_readPin+0xc4>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <GPIO_readPin+0x62>
    1428:	49 c0       	rjmp	.+146    	; 0x14bc <GPIO_readPin+0xf4>
    142a:	60 c0       	rjmp	.+192    	; 0x14ec <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num))
    142c:	e9 e3       	ldi	r30, 0x39	; 57
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_readPin+0x7c>
    1440:	55 95       	asr	r21
    1442:	47 95       	ror	r20
    1444:	8a 95       	dec	r24
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_readPin+0x78>
    1448:	ca 01       	movw	r24, r20
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	88 23       	and	r24, r24
    1450:	19 f0       	breq	.+6      	; 0x1458 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    1452:	51 e0       	ldi	r21, 0x01	; 1
    1454:	5b 83       	std	Y+3, r21	; 0x03
    1456:	4b c0       	rjmp	.+150    	; 0x14ee <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1458:	1b 82       	std	Y+3, r1	; 0x03
    145a:	49 c0       	rjmp	.+146    	; 0x14ee <GPIO_readPin+0x126>
				}
				break;
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    145c:	e6 e3       	ldi	r30, 0x36	; 54
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a9 01       	movw	r20, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <GPIO_readPin+0xac>
    1470:	55 95       	asr	r21
    1472:	47 95       	ror	r20
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <GPIO_readPin+0xa8>
    1478:	ca 01       	movw	r24, r20
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	88 23       	and	r24, r24
    1480:	19 f0       	breq	.+6      	; 0x1488 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    1482:	51 e0       	ldi	r21, 0x01	; 1
    1484:	5b 83       	std	Y+3, r21	; 0x03
    1486:	33 c0       	rjmp	.+102    	; 0x14ee <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1488:	1b 82       	std	Y+3, r1	; 0x03
    148a:	31 c0       	rjmp	.+98     	; 0x14ee <GPIO_readPin+0x126>
				}
				break;
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    148c:	e3 e3       	ldi	r30, 0x33	; 51
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_readPin+0xdc>
    14a0:	55 95       	asr	r21
    14a2:	47 95       	ror	r20
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_readPin+0xd8>
    14a8:	ca 01       	movw	r24, r20
    14aa:	81 70       	andi	r24, 0x01	; 1
    14ac:	90 70       	andi	r25, 0x00	; 0
    14ae:	88 23       	and	r24, r24
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    14b2:	51 e0       	ldi	r21, 0x01	; 1
    14b4:	5b 83       	std	Y+3, r21	; 0x03
    14b6:	1b c0       	rjmp	.+54     	; 0x14ee <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    14b8:	1b 82       	std	Y+3, r1	; 0x03
    14ba:	19 c0       	rjmp	.+50     	; 0x14ee <GPIO_readPin+0x126>
				}
				break;
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    14bc:	e0 e3       	ldi	r30, 0x30	; 48
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <GPIO_readPin+0x10c>
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <GPIO_readPin+0x108>
    14d8:	ca 01       	movw	r24, r20
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	90 70       	andi	r25, 0x00	; 0
    14de:	88 23       	and	r24, r24
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    14e2:	51 e0       	ldi	r21, 0x01	; 1
    14e4:	5b 83       	std	Y+3, r21	; 0x03
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    14e8:	1b 82       	std	Y+3, r1	; 0x03
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <GPIO_readPin+0x126>
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_readPin+0x12a>
				}
				break;
		}
	}
}
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	8e 83       	std	Y+6, r24	; 0x06
    14f2:	8e 81       	ldd	r24, Y+6	; 0x06
    14f4:	26 96       	adiw	r28, 0x06	; 6
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_setupPortDirection+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_setupPortDirection+0x8>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	90 f5       	brcc	.+100    	; 0x1580 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3c 83       	std	Y+4, r19	; 0x04
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	d1 f0       	breq	.+52     	; 0x1564 <GPIO_setupPortDirection+0x5e>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <GPIO_setupPortDirection+0x3e>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <GPIO_setupPortDirection+0x54>
    1542:	1e c0       	rjmp	.+60     	; 0x1580 <GPIO_setupPortDirection+0x7a>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	81 f0       	breq	.+32     	; 0x156e <GPIO_setupPortDirection+0x68>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	81 f0       	breq	.+32     	; 0x1578 <GPIO_setupPortDirection+0x72>
    1558:	13 c0       	rjmp	.+38     	; 0x1580 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
    1562:	0e c0       	rjmp	.+28     	; 0x1580 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1564:	e7 e3       	ldi	r30, 0x37	; 55
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    156e:	e4 e3       	ldi	r30, 0x34	; 52
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1578:	e1 e3       	ldi	r30, 0x31	; 49
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <GPIO_writePort+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_writePort+0x8>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	84 30       	cpi	r24, 0x04	; 4
    15a2:	90 f5       	brcc	.+100    	; 0x1608 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch(port_num)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	d1 f0       	breq	.+52     	; 0x15ec <GPIO_writePort+0x5e>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	2c f4       	brge	.+10     	; 0x15cc <GPIO_writePort+0x3e>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <GPIO_writePort+0x54>
    15ca:	1e c0       	rjmp	.+60     	; 0x1608 <GPIO_writePort+0x7a>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <GPIO_writePort+0x68>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <GPIO_writePort+0x72>
    15e0:	13 c0       	rjmp	.+38     	; 0x1608 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15e2:	eb e3       	ldi	r30, 0x3B	; 59
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15f6:	e5 e3       	ldi	r30, 0x35	; 53
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	80 83       	st	Z, r24
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1600:	e2 e3       	ldi	r30, 0x32	; 50
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
			break;
		}
	}
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_readPort+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_readPort+0x8>
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	98 f5       	brcc	.+102    	; 0x1692 <GPIO_readPort+0x7c>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch(port_num)
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	3c 83       	std	Y+4, r19	; 0x04
    1634:	2b 83       	std	Y+3, r18	; 0x03
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	d1 f0       	breq	.+52     	; 0x1674 <GPIO_readPort+0x5e>
    1640:	2b 81       	ldd	r18, Y+3	; 0x03
    1642:	3c 81       	ldd	r19, Y+4	; 0x04
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	2c f4       	brge	.+10     	; 0x1654 <GPIO_readPort+0x3e>
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 f0       	breq	.+24     	; 0x166a <GPIO_readPort+0x54>
    1652:	1f c0       	rjmp	.+62     	; 0x1692 <GPIO_readPort+0x7c>
    1654:	2b 81       	ldd	r18, Y+3	; 0x03
    1656:	3c 81       	ldd	r19, Y+4	; 0x04
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	81 f0       	breq	.+32     	; 0x167e <GPIO_readPort+0x68>
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	91 05       	cpc	r25, r1
    1666:	81 f0       	breq	.+32     	; 0x1688 <GPIO_readPort+0x72>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			return PINA;
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	90 81       	ld	r25, Z
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	10 c0       	rjmp	.+32     	; 0x1694 <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return PINB;
    1674:	e6 e3       	ldi	r30, 0x36	; 54
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	20 81       	ld	r18, Z
    167a:	2a 83       	std	Y+2, r18	; 0x02
    167c:	0b c0       	rjmp	.+22     	; 0x1694 <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return PINC;
    167e:	e3 e3       	ldi	r30, 0x33	; 51
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	30 81       	ld	r19, Z
    1684:	3a 83       	std	Y+2, r19	; 0x02
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return PIND;
    1688:	e0 e3       	ldi	r30, 0x30	; 48
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <GPIO_readPort+0x7e>
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_readPort+0x82>
			break;
		}
	}
}
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	9d 83       	std	Y+5, r25	; 0x05
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    16d4:	80 91 8a 01 	lds	r24, 0x018A
    16d8:	90 91 8b 01 	lds	r25, 0x018B
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	29 f0       	breq	.+10     	; 0x16ea <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16e0:	e0 91 8a 01 	lds	r30, 0x018A
    16e4:	f0 91 8b 01 	lds	r31, 0x018B
    16e8:	09 95       	icall
	}
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <ICU_init+0x6>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    171e:	a1 e3       	ldi	r26, 0x31	; 49
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e1 e3       	ldi	r30, 0x31	; 49
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 7b       	andi	r24, 0xBF	; 191
    172a:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    172c:	ef e4       	ldi	r30, 0x4F	; 79
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8c e0       	ldi	r24, 0x0C	; 12
    1732:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1734:	ae e4       	ldi	r26, 0x4E	; 78
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ee e4       	ldi	r30, 0x4E	; 78
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	98 2f       	mov	r25, r24
    1740:	98 7f       	andi	r25, 0xF8	; 248
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	80 81       	ld	r24, Z
    1748:	89 2b       	or	r24, r25
    174a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    174c:	ae e4       	ldi	r26, 0x4E	; 78
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ee e4       	ldi	r30, 0x4E	; 78
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	28 2f       	mov	r18, r24
    1758:	2f 7b       	andi	r18, 0xBF	; 191
    175a:	e9 81       	ldd	r30, Y+1	; 0x01
    175c:	fa 81       	ldd	r31, Y+2	; 0x02
    175e:	81 81       	ldd	r24, Z+1	; 0x01
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	00 24       	eor	r0, r0
    1766:	96 95       	lsr	r25
    1768:	87 95       	ror	r24
    176a:	07 94       	ror	r0
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	07 94       	ror	r0
    1772:	98 2f       	mov	r25, r24
    1774:	80 2d       	mov	r24, r0
    1776:	82 2b       	or	r24, r18
    1778:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    177a:	ec e4       	ldi	r30, 0x4C	; 76
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	11 82       	std	Z+1, r1	; 0x01
    1780:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1782:	e6 e4       	ldi	r30, 0x46	; 70
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	11 82       	std	Z+1, r1	; 0x01
    1788:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    178a:	a9 e5       	ldi	r26, 0x59	; 89
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e9 e5       	ldi	r30, 0x59	; 89
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 62       	ori	r24, 0x20	; 32
    1796:	8c 93       	st	X, r24
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <ICU_setCallBack+0x6>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	90 93 8b 01 	sts	0x018B, r25
    17b8:	80 93 8a 01 	sts	0x018A, r24
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    17d2:	ae e4       	ldi	r26, 0x4E	; 78
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ee e4       	ldi	r30, 0x4E	; 78
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	2f 7b       	andi	r18, 0xBF	; 191
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	00 24       	eor	r0, r0
    17e8:	96 95       	lsr	r25
    17ea:	87 95       	ror	r24
    17ec:	07 94       	ror	r0
    17ee:	96 95       	lsr	r25
    17f0:	87 95       	ror	r24
    17f2:	07 94       	ror	r0
    17f4:	98 2f       	mov	r25, r24
    17f6:	80 2d       	mov	r24, r0
    17f8:	82 2b       	or	r24, r18
    17fa:	8c 93       	st	X, r24
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    180c:	e6 e4       	ldi	r30, 0x46	; 70
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1822:	ec e4       	ldi	r30, 0x4C	; 76
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	11 82       	std	Z+1, r1	; 0x01
    1828:	10 82       	st	Z, r1
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1838:	ef e4       	ldi	r30, 0x4F	; 79
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	10 82       	st	Z, r1
	TCCR1B = 0;
    183e:	ee e4       	ldi	r30, 0x4E	; 78
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	10 82       	st	Z, r1
	TCNT1 = 0;
    1844:	ec e4       	ldi	r30, 0x4C	; 76
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	11 82       	std	Z+1, r1	; 0x01
    184a:	10 82       	st	Z, r1
	ICR1 = 0;
    184c:	e6 e4       	ldi	r30, 0x46	; 70
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	11 82       	std	Z+1, r1	; 0x01
    1852:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1854:	a9 e5       	ldi	r26, 0x59	; 89
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e9 e5       	ldi	r30, 0x59	; 89
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7d       	andi	r24, 0xDF	; 223
    1860:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1862:	10 92 8b 01 	sts	0x018B, r1
    1866:	10 92 8a 01 	sts	0x018A, r1
}
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	2e 97       	sbiw	r28, 0x0e	; 14
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	f8 94       	cli
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 ea       	ldi	r26, 0xA0	; 160
    189e:	b1 e4       	ldi	r27, 0x41	; 65
    18a0:	8b 87       	std	Y+11, r24	; 0x0b
    18a2:	9c 87       	std	Y+12, r25	; 0x0c
    18a4:	ad 87       	std	Y+13, r26	; 0x0d
    18a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	55 e4       	ldi	r21, 0x45	; 69
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8f 83       	std	Y+7, r24	; 0x07
    18c2:	98 87       	std	Y+8, r25	; 0x08
    18c4:	a9 87       	std	Y+9, r26	; 0x09
    18c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_init+0x7a>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_init+0xf8>
	else if (__tmp > 65535)
    18ea:	6f 81       	ldd	r22, Y+7	; 0x07
    18ec:	78 85       	ldd	r23, Y+8	; 0x08
    18ee:	89 85       	ldd	r24, Y+9	; 0x09
    18f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_init+0xda>
    192c:	80 e9       	ldi	r24, 0x90	; 144
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_init+0xc8>
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_init+0xbc>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_init+0x104>
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	65 e0       	ldi	r22, 0x05	; 5
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	66 e0       	ldi	r22, 0x06	; 6
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    19a4:	83 e3       	ldi	r24, 0x33	; 51
    19a6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    19aa:	82 e3       	ldi	r24, 0x32	; 50
    19ac:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    19b0:	88 e2       	ldi	r24, 0x28	; 40
    19b2:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19b6:	8c e0       	ldi	r24, 0x0C	; 12
    19b8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
}
    19c2:	2e 96       	adiw	r28, 0x0e	; 14
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	c3 56       	subi	r28, 0x63	; 99
    19e2:	d0 40       	sbci	r29, 0x00	; 0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 59       	subi	r30, 0x9D	; 157
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    1a00:	fe 01       	movw	r30, r28
    1a02:	e1 5a       	subi	r30, 0xA1	; 161
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e8       	ldi	r26, 0x80	; 128
    1a0c:	bf e3       	ldi	r27, 0x3F	; 63
    1a0e:	80 83       	st	Z, r24
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	a2 83       	std	Z+2, r26	; 0x02
    1a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	8e 01       	movw	r16, r28
    1a18:	05 5a       	subi	r16, 0xA5	; 165
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e1 5a       	subi	r30, 0xA1	; 161
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a e7       	ldi	r20, 0x7A	; 122
    1a30:	55 e4       	ldi	r21, 0x45	; 69
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 5a       	subi	r30, 0xA5	; 165
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	44 f4       	brge	.+16     	; 0x1a72 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a62:	fe 01       	movw	r30, r28
    1a64:	e7 5a       	subi	r30, 0xA7	; 167
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24
    1a70:	64 c0       	rjmp	.+200    	; 0x1b3a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a72:	fe 01       	movw	r30, r28
    1a74:	e5 5a       	subi	r30, 0xA5	; 165
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	0c f0       	brlt	.+2      	; 0x1a92 <LCD_sendCommand+0xbe>
    1a90:	43 c0       	rjmp	.+134    	; 0x1b18 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	fe 01       	movw	r30, r28
    1a94:	e1 5a       	subi	r30, 0xA1	; 161
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	07 5a       	subi	r16, 0xA7	; 167
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	1f c0       	rjmp	.+62     	; 0x1b08 <LCD_sendCommand+0x134>
    1aca:	fe 01       	movw	r30, r28
    1acc:	e9 5a       	subi	r30, 0xA9	; 169
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 e9       	ldi	r24, 0x90	; 144
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e9 5a       	subi	r30, 0xA9	; 169
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_sendCommand+0x10e>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 5a       	subi	r30, 0xA9	; 169
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	de 01       	movw	r26, r28
    1af2:	a7 5a       	subi	r26, 0xA7	; 167
    1af4:	bf 4f       	sbci	r27, 0xFF	; 255
    1af6:	fe 01       	movw	r30, r28
    1af8:	e7 5a       	subi	r30, 0xA7	; 167
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	91 81       	ldd	r25, Z+1	; 0x01
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	9c 93       	st	X, r25
    1b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e7 5a       	subi	r30, 0xA7	; 167
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	d1 f6       	brne	.-76     	; 0x1aca <LCD_sendCommand+0xf6>
    1b16:	27 c0       	rjmp	.+78     	; 0x1b66 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	8e 01       	movw	r16, r28
    1b1a:	07 5a       	subi	r16, 0xA7	; 167
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e5 5a       	subi	r30, 0xA5	; 165
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
    1b3a:	de 01       	movw	r26, r28
    1b3c:	ab 5a       	subi	r26, 0xAB	; 171
    1b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b40:	fe 01       	movw	r30, r28
    1b42:	e7 5a       	subi	r30, 0xA7	; 167
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	8d 93       	st	X+, r24
    1b4c:	9c 93       	st	X, r25
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 5a       	subi	r30, 0xAB	; 171
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_sendCommand+0x184>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	eb 5a       	subi	r30, 0xAB	; 171
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    1b70:	fe 01       	movw	r30, r28
    1b72:	ef 5a       	subi	r30, 0xAF	; 175
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	8e 01       	movw	r16, r28
    1b88:	03 5b       	subi	r16, 0xB3	; 179
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ef 5a       	subi	r30, 0xAF	; 175
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ba0:	55 e4       	ldi	r21, 0x45	; 69
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e3 5b       	subi	r30, 0xB3	; 179
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	44 f4       	brge	.+16     	; 0x1be2 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e5 5b       	subi	r30, 0xB5	; 181
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	64 c0       	rjmp	.+200    	; 0x1caa <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1be2:	fe 01       	movw	r30, r28
    1be4:	e3 5b       	subi	r30, 0xB3	; 179
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	0c f0       	brlt	.+2      	; 0x1c02 <LCD_sendCommand+0x22e>
    1c00:	43 c0       	rjmp	.+134    	; 0x1c88 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	fe 01       	movw	r30, r28
    1c04:	ef 5a       	subi	r30, 0xAF	; 175
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8e 01       	movw	r16, r28
    1c22:	05 5b       	subi	r16, 0xB5	; 181
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	f8 01       	movw	r30, r16
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
    1c38:	1f c0       	rjmp	.+62     	; 0x1c78 <LCD_sendCommand+0x2a4>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e7 5b       	subi	r30, 0xB7	; 183
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 e9       	ldi	r24, 0x90	; 144
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e7 5b       	subi	r30, 0xB7	; 183
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x27e>
    1c56:	fe 01       	movw	r30, r28
    1c58:	e7 5b       	subi	r30, 0xB7	; 183
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	de 01       	movw	r26, r28
    1c62:	a5 5b       	subi	r26, 0xB5	; 181
    1c64:	bf 4f       	sbci	r27, 0xFF	; 255
    1c66:	fe 01       	movw	r30, r28
    1c68:	e5 5b       	subi	r30, 0xB5	; 181
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	11 96       	adiw	r26, 0x01	; 1
    1c74:	9c 93       	st	X, r25
    1c76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	d1 f6       	brne	.-76     	; 0x1c3a <LCD_sendCommand+0x266>
    1c86:	27 c0       	rjmp	.+78     	; 0x1cd6 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	05 5b       	subi	r16, 0xB5	; 181
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e3 5b       	subi	r30, 0xB3	; 179
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
    1caa:	de 01       	movw	r26, r28
    1cac:	a9 5b       	subi	r26, 0xB9	; 185
    1cae:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e5 5b       	subi	r30, 0xB5	; 181
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	8d 93       	st	X+, r24
    1cbc:	9c 93       	st	X, r25
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e9 5b       	subi	r30, 0xB9	; 185
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_sendCommand+0x2f4>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e9 5b       	subi	r30, 0xB9	; 185
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ed 59       	subi	r30, 0x9D	; 157
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	80 71       	andi	r24, 0x10	; 16
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	95 95       	asr	r25
    1ce8:	87 95       	ror	r24
    1cea:	95 95       	asr	r25
    1cec:	87 95       	ror	r24
    1cee:	95 95       	asr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	95 95       	asr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	63 e0       	ldi	r22, 0x03	; 3
    1cfc:	49 2f       	mov	r20, r25
    1cfe:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1d02:	fe 01       	movw	r30, r28
    1d04:	ed 59       	subi	r30, 0x9D	; 157
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	80 72       	andi	r24, 0x20	; 32
    1d10:	90 70       	andi	r25, 0x00	; 0
    1d12:	95 95       	asr	r25
    1d14:	87 95       	ror	r24
    1d16:	95 95       	asr	r25
    1d18:	87 95       	ror	r24
    1d1a:	95 95       	asr	r25
    1d1c:	87 95       	ror	r24
    1d1e:	95 95       	asr	r25
    1d20:	87 95       	ror	r24
    1d22:	95 95       	asr	r25
    1d24:	87 95       	ror	r24
    1d26:	98 2f       	mov	r25, r24
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	64 e0       	ldi	r22, 0x04	; 4
    1d2c:	49 2f       	mov	r20, r25
    1d2e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 59       	subi	r30, 0x9D	; 157
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	80 74       	andi	r24, 0x40	; 64
    1d40:	90 70       	andi	r25, 0x00	; 0
    1d42:	08 2e       	mov	r0, r24
    1d44:	89 2f       	mov	r24, r25
    1d46:	00 0c       	add	r0, r0
    1d48:	88 1f       	adc	r24, r24
    1d4a:	99 0b       	sbc	r25, r25
    1d4c:	00 0c       	add	r0, r0
    1d4e:	88 1f       	adc	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	98 2f       	mov	r25, r24
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	49 2f       	mov	r20, r25
    1d5a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1d5e:	fe 01       	movw	r30, r28
    1d60:	ed 59       	subi	r30, 0x9D	; 157
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	98 2f       	mov	r25, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	99 27       	eor	r25, r25
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	66 e0       	ldi	r22, 0x06	; 6
    1d72:	49 2f       	mov	r20, r25
    1d74:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 5b       	subi	r30, 0xBD	; 189
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	8e 01       	movw	r16, r28
    1d90:	01 5c       	subi	r16, 0xC1	; 193
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	ed 5b       	subi	r30, 0xBD	; 189
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	55 e4       	ldi	r21, 0x45	; 69
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 83       	st	Z, r24
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	a2 83       	std	Z+2, r26	; 0x02
    1dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ff 96       	adiw	r30, 0x3f	; 63
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e af       	std	Y+62, r25	; 0x3e
    1dde:	8d af       	std	Y+61, r24	; 0x3d
    1de0:	46 c0       	rjmp	.+140    	; 0x1e6e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1de2:	fe 01       	movw	r30, r28
    1de4:	ff 96       	adiw	r30, 0x3f	; 63
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	64 f5       	brge	.+88     	; 0x1e56 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 5b       	subi	r30, 0xBD	; 189
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e af       	std	Y+62, r25	; 0x3e
    1e2a:	8d af       	std	Y+61, r24	; 0x3d
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <LCD_sendCommand+0x478>
    1e2e:	80 e9       	ldi	r24, 0x90	; 144
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	9c af       	std	Y+60, r25	; 0x3c
    1e34:	8b af       	std	Y+59, r24	; 0x3b
    1e36:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e38:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_sendCommand+0x466>
    1e3e:	9c af       	std	Y+60, r25	; 0x3c
    1e40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e af       	std	Y+62, r25	; 0x3e
    1e4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <LCD_sendCommand+0x45a>
    1e54:	16 c0       	rjmp	.+44     	; 0x1e82 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	fe 01       	movw	r30, r28
    1e58:	ff 96       	adiw	r30, 0x3f	; 63
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9e af       	std	Y+62, r25	; 0x3e
    1e6c:	8d af       	std	Y+61, r24	; 0x3d
    1e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e72:	9a af       	std	Y+58, r25	; 0x3a
    1e74:	89 af       	std	Y+57, r24	; 0x39
    1e76:	89 ad       	ldd	r24, Y+57	; 0x39
    1e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_sendCommand+0x4a6>
    1e7e:	9a af       	std	Y+58, r25	; 0x3a
    1e80:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	62 e0       	ldi	r22, 0x02	; 2
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 e8       	ldi	r26, 0x80	; 128
    1e92:	bf e3       	ldi	r27, 0x3F	; 63
    1e94:	8d ab       	std	Y+53, r24	; 0x35
    1e96:	9e ab       	std	Y+54, r25	; 0x36
    1e98:	af ab       	std	Y+55, r26	; 0x37
    1e9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a e7       	ldi	r20, 0x7A	; 122
    1eaa:	55 e4       	ldi	r21, 0x45	; 69
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	89 ab       	std	Y+49, r24	; 0x31
    1eb6:	9a ab       	std	Y+50, r25	; 0x32
    1eb8:	ab ab       	std	Y+51, r26	; 0x33
    1eba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	98 ab       	std	Y+48, r25	; 0x30
    1eda:	8f a7       	std	Y+47, r24	; 0x2f
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ede:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef8:	7e a9       	ldd	r23, Y+54	; 0x36
    1efa:	8f a9       	ldd	r24, Y+55	; 0x37
    1efc:	98 ad       	ldd	r25, Y+56	; 0x38
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	98 ab       	std	Y+48, r25	; 0x30
    1f1c:	8f a7       	std	Y+47, r24	; 0x2f
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <LCD_sendCommand+0x56a>
    1f20:	80 e9       	ldi	r24, 0x90	; 144
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	9e a7       	std	Y+46, r25	; 0x2e
    1f26:	8d a7       	std	Y+45, r24	; 0x2d
    1f28:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_sendCommand+0x558>
    1f30:	9e a7       	std	Y+46, r25	; 0x2e
    1f32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f36:	98 a9       	ldd	r25, Y+48	; 0x30
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	98 ab       	std	Y+48, r25	; 0x30
    1f3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f40:	98 a9       	ldd	r25, Y+48	; 0x30
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <LCD_sendCommand+0x54c>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	98 ab       	std	Y+48, r25	; 0x30
    1f5a:	8f a7       	std	Y+47, r24	; 0x2f
    1f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f60:	9c a7       	std	Y+44, r25	; 0x2c
    1f62:	8b a7       	std	Y+43, r24	; 0x2b
    1f64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_sendCommand+0x594>
    1f6c:	9c a7       	std	Y+44, r25	; 0x2c
    1f6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	62 e0       	ldi	r22, 0x02	; 2
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e8       	ldi	r26, 0x80	; 128
    1f80:	bf e3       	ldi	r27, 0x3F	; 63
    1f82:	8f a3       	std	Y+39, r24	; 0x27
    1f84:	98 a7       	std	Y+40, r25	; 0x28
    1f86:	a9 a7       	std	Y+41, r26	; 0x29
    1f88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a e7       	ldi	r20, 0x7A	; 122
    1f98:	55 e4       	ldi	r21, 0x45	; 69
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	8b a3       	std	Y+35, r24	; 0x23
    1fa4:	9c a3       	std	Y+36, r25	; 0x24
    1fa6:	ad a3       	std	Y+37, r26	; 0x25
    1fa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1faa:	6b a1       	ldd	r22, Y+35	; 0x23
    1fac:	7c a1       	ldd	r23, Y+36	; 0x24
    1fae:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9a a3       	std	Y+34, r25	; 0x22
    1fc8:	89 a3       	std	Y+33, r24	; 0x21
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fce:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
    200c:	0f c0       	rjmp	.+30     	; 0x202c <LCD_sendCommand+0x658>
    200e:	80 e9       	ldi	r24, 0x90	; 144
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	98 a3       	std	Y+32, r25	; 0x20
    2014:	8f 8f       	std	Y+31, r24	; 0x1f
    2016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2018:	98 a1       	ldd	r25, Y+32	; 0x20
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_sendCommand+0x646>
    201e:	98 a3       	std	Y+32, r25	; 0x20
    2020:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	89 a1       	ldd	r24, Y+33	; 0x21
    2024:	9a a1       	ldd	r25, Y+34	; 0x22
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	9a a3       	std	Y+34, r25	; 0x22
    202a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	89 a1       	ldd	r24, Y+33	; 0x21
    202e:	9a a1       	ldd	r25, Y+34	; 0x22
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <LCD_sendCommand+0x63a>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	6b a1       	ldd	r22, Y+35	; 0x23
    2038:	7c a1       	ldd	r23, Y+36	; 0x24
    203a:	8d a1       	ldd	r24, Y+37	; 0x25
    203c:	9e a1       	ldd	r25, Y+38	; 0x26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	9e 8f       	std	Y+30, r25	; 0x1e
    2050:	8d 8f       	std	Y+29, r24	; 0x1d
    2052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2054:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_sendCommand+0x682>
    205a:	9e 8f       	std	Y+30, r25	; 0x1e
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    205e:	fe 01       	movw	r30, r28
    2060:	ed 59       	subi	r30, 0x9D	; 157
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	98 2f       	mov	r25, r24
    2068:	91 70       	andi	r25, 0x01	; 1
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	63 e0       	ldi	r22, 0x03	; 3
    206e:	49 2f       	mov	r20, r25
    2070:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2074:	fe 01       	movw	r30, r28
    2076:	ed 59       	subi	r30, 0x9D	; 157
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	82 70       	andi	r24, 0x02	; 2
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	95 95       	asr	r25
    2086:	87 95       	ror	r24
    2088:	98 2f       	mov	r25, r24
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	64 e0       	ldi	r22, 0x04	; 4
    208e:	49 2f       	mov	r20, r25
    2090:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2094:	fe 01       	movw	r30, r28
    2096:	ed 59       	subi	r30, 0x9D	; 157
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	84 70       	andi	r24, 0x04	; 4
    20a2:	90 70       	andi	r25, 0x00	; 0
    20a4:	95 95       	asr	r25
    20a6:	87 95       	ror	r24
    20a8:	95 95       	asr	r25
    20aa:	87 95       	ror	r24
    20ac:	98 2f       	mov	r25, r24
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	65 e0       	ldi	r22, 0x05	; 5
    20b2:	49 2f       	mov	r20, r25
    20b4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    20b8:	fe 01       	movw	r30, r28
    20ba:	ed 59       	subi	r30, 0x9D	; 157
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	88 70       	andi	r24, 0x08	; 8
    20c6:	90 70       	andi	r25, 0x00	; 0
    20c8:	95 95       	asr	r25
    20ca:	87 95       	ror	r24
    20cc:	95 95       	asr	r25
    20ce:	87 95       	ror	r24
    20d0:	95 95       	asr	r25
    20d2:	87 95       	ror	r24
    20d4:	98 2f       	mov	r25, r24
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	66 e0       	ldi	r22, 0x06	; 6
    20da:	49 2f       	mov	r20, r25
    20dc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	9a 8f       	std	Y+26, r25	; 0x1a
    20ec:	ab 8f       	std	Y+27, r26	; 0x1b
    20ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	69 8d       	ldd	r22, Y+25	; 0x19
    20f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	55 e4       	ldi	r21, 0x45	; 69
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8d 8b       	std	Y+21, r24	; 0x15
    210a:	9e 8b       	std	Y+22, r25	; 0x16
    210c:	af 8b       	std	Y+23, r26	; 0x17
    210e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2110:	6d 89       	ldd	r22, Y+21	; 0x15
    2112:	7e 89       	ldd	r23, Y+22	; 0x16
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2132:	6d 89       	ldd	r22, Y+21	; 0x15
    2134:	7e 89       	ldd	r23, Y+22	; 0x16
    2136:	8f 89       	ldd	r24, Y+23	; 0x17
    2138:	98 8d       	ldd	r25, Y+24	; 0x18
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	69 8d       	ldd	r22, Y+25	; 0x19
    214c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <LCD_sendCommand+0x7be>
    2174:	80 e9       	ldi	r24, 0x90	; 144
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	9a 8b       	std	Y+18, r25	; 0x12
    217a:	89 8b       	std	Y+17, r24	; 0x11
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	9a 89       	ldd	r25, Y+18	; 0x12
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_sendCommand+0x7ac>
    2184:	9a 8b       	std	Y+18, r25	; 0x12
    2186:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	8b 89       	ldd	r24, Y+19	; 0x13
    218a:	9c 89       	ldd	r25, Y+20	; 0x14
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9c 8b       	std	Y+20, r25	; 0x14
    2190:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	8b 89       	ldd	r24, Y+19	; 0x13
    2194:	9c 89       	ldd	r25, Y+20	; 0x14
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <LCD_sendCommand+0x7a0>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6d 89       	ldd	r22, Y+21	; 0x15
    219e:	7e 89       	ldd	r23, Y+22	; 0x16
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	98 8d       	ldd	r25, Y+24	; 0x18
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9c 8b       	std	Y+20, r25	; 0x14
    21ae:	8b 8b       	std	Y+19, r24	; 0x13
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	98 8b       	std	Y+16, r25	; 0x10
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
    21b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ba:	98 89       	ldd	r25, Y+16	; 0x10
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_sendCommand+0x7e8>
    21c0:	98 8b       	std	Y+16, r25	; 0x10
    21c2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	62 e0       	ldi	r22, 0x02	; 2
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e8       	ldi	r26, 0x80	; 128
    21d4:	bf e3       	ldi	r27, 0x3F	; 63
    21d6:	8b 87       	std	Y+11, r24	; 0x0b
    21d8:	9c 87       	std	Y+12, r25	; 0x0c
    21da:	ad 87       	std	Y+13, r26	; 0x0d
    21dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a e7       	ldi	r20, 0x7A	; 122
    21ec:	55 e4       	ldi	r21, 0x45	; 69
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8f 83       	std	Y+7, r24	; 0x07
    21f8:	98 87       	std	Y+8, r25	; 0x08
    21fa:	a9 87       	std	Y+9, r26	; 0x09
    21fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	2c f4       	brge	.+10     	; 0x2220 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	3f c0       	rjmp	.+126    	; 0x229e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	4c f5       	brge	.+82     	; 0x228a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	6b 85       	ldd	r22, Y+11	; 0x0b
    223a:	7c 85       	ldd	r23, Y+12	; 0x0c
    223c:	8d 85       	ldd	r24, Y+13	; 0x0d
    223e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <LCD_sendCommand+0x8ac>
    2262:	80 e9       	ldi	r24, 0x90	; 144
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_sendCommand+0x89a>
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	69 f7       	brne	.-38     	; 0x2262 <LCD_sendCommand+0x88e>
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	9e 83       	std	Y+6, r25	; 0x06
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_sendCommand+0x8d6>
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22b2:	cd 59       	subi	r28, 0x9D	; 157
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	c3 56       	subi	r28, 0x63	; 99
    22d8:	d0 40       	sbci	r29, 0x00	; 0
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 59       	subi	r30, 0x9D	; 157
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 5a       	subi	r30, 0xA1	; 161
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	8e 01       	movw	r16, r28
    230e:	05 5a       	subi	r16, 0xA5	; 165
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	e1 5a       	subi	r30, 0xA1	; 161
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a e7       	ldi	r20, 0x7A	; 122
    2326:	55 e4       	ldi	r21, 0x45	; 69
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233a:	fe 01       	movw	r30, r28
    233c:	e5 5a       	subi	r30, 0xA5	; 165
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	44 f4       	brge	.+16     	; 0x2368 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2358:	fe 01       	movw	r30, r28
    235a:	e7 5a       	subi	r30, 0xA7	; 167
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
    2366:	64 c0       	rjmp	.+200    	; 0x2430 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2368:	fe 01       	movw	r30, r28
    236a:	e5 5a       	subi	r30, 0xA5	; 165
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	0c f0       	brlt	.+2      	; 0x2388 <LCD_displayCharacter+0xbe>
    2386:	43 c0       	rjmp	.+134    	; 0x240e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	fe 01       	movw	r30, r28
    238a:	e1 5a       	subi	r30, 0xA1	; 161
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8e 01       	movw	r16, r28
    23a8:	07 5a       	subi	r16, 0xA7	; 167
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	f8 01       	movw	r30, r16
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
    23be:	1f c0       	rjmp	.+62     	; 0x23fe <LCD_displayCharacter+0x134>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e9 5a       	subi	r30, 0xA9	; 169
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 e9       	ldi	r24, 0x90	; 144
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	fe 01       	movw	r30, r28
    23d0:	e9 5a       	subi	r30, 0xA9	; 169
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_displayCharacter+0x10e>
    23dc:	fe 01       	movw	r30, r28
    23de:	e9 5a       	subi	r30, 0xA9	; 169
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	de 01       	movw	r26, r28
    23e8:	a7 5a       	subi	r26, 0xA7	; 167
    23ea:	bf 4f       	sbci	r27, 0xFF	; 255
    23ec:	fe 01       	movw	r30, r28
    23ee:	e7 5a       	subi	r30, 0xA7	; 167
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	9c 93       	st	X, r25
    23fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 5a       	subi	r30, 0xA7	; 167
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	d1 f6       	brne	.-76     	; 0x23c0 <LCD_displayCharacter+0xf6>
    240c:	27 c0       	rjmp	.+78     	; 0x245c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	8e 01       	movw	r16, r28
    2410:	07 5a       	subi	r16, 0xA7	; 167
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e5 5a       	subi	r30, 0xA5	; 165
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	f8 01       	movw	r30, r16
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
    2430:	de 01       	movw	r26, r28
    2432:	ab 5a       	subi	r26, 0xAB	; 171
    2434:	bf 4f       	sbci	r27, 0xFF	; 255
    2436:	fe 01       	movw	r30, r28
    2438:	e7 5a       	subi	r30, 0xA7	; 167
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	8d 93       	st	X+, r24
    2442:	9c 93       	st	X, r25
    2444:	fe 01       	movw	r30, r28
    2446:	eb 5a       	subi	r30, 0xAB	; 171
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_displayCharacter+0x184>
    2452:	fe 01       	movw	r30, r28
    2454:	eb 5a       	subi	r30, 0xAB	; 171
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	62 e0       	ldi	r22, 0x02	; 2
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2466:	fe 01       	movw	r30, r28
    2468:	ef 5a       	subi	r30, 0xAF	; 175
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	8e 01       	movw	r16, r28
    247e:	03 5b       	subi	r16, 0xB3	; 179
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	ef 5a       	subi	r30, 0xAF	; 175
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	55 e4       	ldi	r21, 0x45	; 69
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	80 83       	st	Z, r24
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	a2 83       	std	Z+2, r26	; 0x02
    24a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24aa:	fe 01       	movw	r30, r28
    24ac:	e3 5b       	subi	r30, 0xB3	; 179
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	44 f4       	brge	.+16     	; 0x24d8 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    24c8:	fe 01       	movw	r30, r28
    24ca:	e5 5b       	subi	r30, 0xB5	; 181
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	64 c0       	rjmp	.+200    	; 0x25a0 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24d8:	fe 01       	movw	r30, r28
    24da:	e3 5b       	subi	r30, 0xB3	; 179
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	0c f0       	brlt	.+2      	; 0x24f8 <LCD_displayCharacter+0x22e>
    24f6:	43 c0       	rjmp	.+134    	; 0x257e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	fe 01       	movw	r30, r28
    24fa:	ef 5a       	subi	r30, 0xAF	; 175
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	8e 01       	movw	r16, r28
    2518:	05 5b       	subi	r16, 0xB5	; 181
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	80 83       	st	Z, r24
    252e:	1f c0       	rjmp	.+62     	; 0x256e <LCD_displayCharacter+0x2a4>
    2530:	fe 01       	movw	r30, r28
    2532:	e7 5b       	subi	r30, 0xB7	; 183
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 e9       	ldi	r24, 0x90	; 144
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	fe 01       	movw	r30, r28
    2540:	e7 5b       	subi	r30, 0xB7	; 183
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_displayCharacter+0x27e>
    254c:	fe 01       	movw	r30, r28
    254e:	e7 5b       	subi	r30, 0xB7	; 183
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	de 01       	movw	r26, r28
    2558:	a5 5b       	subi	r26, 0xB5	; 181
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
    255c:	fe 01       	movw	r30, r28
    255e:	e5 5b       	subi	r30, 0xB5	; 181
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	11 96       	adiw	r26, 0x01	; 1
    256a:	9c 93       	st	X, r25
    256c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	fe 01       	movw	r30, r28
    2570:	e5 5b       	subi	r30, 0xB5	; 181
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	d1 f6       	brne	.-76     	; 0x2530 <LCD_displayCharacter+0x266>
    257c:	27 c0       	rjmp	.+78     	; 0x25cc <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257e:	8e 01       	movw	r16, r28
    2580:	05 5b       	subi	r16, 0xB5	; 181
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	e3 5b       	subi	r30, 0xB3	; 179
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	de 01       	movw	r26, r28
    25a2:	a9 5b       	subi	r26, 0xB9	; 185
    25a4:	bf 4f       	sbci	r27, 0xFF	; 255
    25a6:	fe 01       	movw	r30, r28
    25a8:	e5 5b       	subi	r30, 0xB5	; 181
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	8d 93       	st	X+, r24
    25b2:	9c 93       	st	X, r25
    25b4:	fe 01       	movw	r30, r28
    25b6:	e9 5b       	subi	r30, 0xB9	; 185
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_displayCharacter+0x2f4>
    25c2:	fe 01       	movw	r30, r28
    25c4:	e9 5b       	subi	r30, 0xB9	; 185
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 59       	subi	r30, 0x9D	; 157
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	80 71       	andi	r24, 0x10	; 16
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	95 95       	asr	r25
    25de:	87 95       	ror	r24
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	95 95       	asr	r25
    25ea:	87 95       	ror	r24
    25ec:	98 2f       	mov	r25, r24
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	63 e0       	ldi	r22, 0x03	; 3
    25f2:	49 2f       	mov	r20, r25
    25f4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25f8:	fe 01       	movw	r30, r28
    25fa:	ed 59       	subi	r30, 0x9D	; 157
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	80 72       	andi	r24, 0x20	; 32
    2606:	90 70       	andi	r25, 0x00	; 0
    2608:	95 95       	asr	r25
    260a:	87 95       	ror	r24
    260c:	95 95       	asr	r25
    260e:	87 95       	ror	r24
    2610:	95 95       	asr	r25
    2612:	87 95       	ror	r24
    2614:	95 95       	asr	r25
    2616:	87 95       	ror	r24
    2618:	95 95       	asr	r25
    261a:	87 95       	ror	r24
    261c:	98 2f       	mov	r25, r24
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	64 e0       	ldi	r22, 0x04	; 4
    2622:	49 2f       	mov	r20, r25
    2624:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2628:	fe 01       	movw	r30, r28
    262a:	ed 59       	subi	r30, 0x9D	; 157
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	88 2f       	mov	r24, r24
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	80 74       	andi	r24, 0x40	; 64
    2636:	90 70       	andi	r25, 0x00	; 0
    2638:	08 2e       	mov	r0, r24
    263a:	89 2f       	mov	r24, r25
    263c:	00 0c       	add	r0, r0
    263e:	88 1f       	adc	r24, r24
    2640:	99 0b       	sbc	r25, r25
    2642:	00 0c       	add	r0, r0
    2644:	88 1f       	adc	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	98 2f       	mov	r25, r24
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	65 e0       	ldi	r22, 0x05	; 5
    264e:	49 2f       	mov	r20, r25
    2650:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2654:	fe 01       	movw	r30, r28
    2656:	ed 59       	subi	r30, 0x9D	; 157
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	98 2f       	mov	r25, r24
    265e:	99 1f       	adc	r25, r25
    2660:	99 27       	eor	r25, r25
    2662:	99 1f       	adc	r25, r25
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	66 e0       	ldi	r22, 0x06	; 6
    2668:	49 2f       	mov	r20, r25
    266a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    266e:	fe 01       	movw	r30, r28
    2670:	ed 5b       	subi	r30, 0xBD	; 189
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e8       	ldi	r26, 0x80	; 128
    267a:	bf e3       	ldi	r27, 0x3F	; 63
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	8e 01       	movw	r16, r28
    2686:	01 5c       	subi	r16, 0xC1	; 193
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	fe 01       	movw	r30, r28
    268c:	ed 5b       	subi	r30, 0xBD	; 189
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	4a e7       	ldi	r20, 0x7A	; 122
    269e:	55 e4       	ldi	r21, 0x45	; 69
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b2:	fe 01       	movw	r30, r28
    26b4:	ff 96       	adiw	r30, 0x3f	; 63
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9e af       	std	Y+62, r25	; 0x3e
    26d4:	8d af       	std	Y+61, r24	; 0x3d
    26d6:	46 c0       	rjmp	.+140    	; 0x2764 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    26d8:	fe 01       	movw	r30, r28
    26da:	ff 96       	adiw	r30, 0x3f	; 63
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	64 f5       	brge	.+88     	; 0x274c <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	fe 01       	movw	r30, r28
    26f6:	ed 5b       	subi	r30, 0xBD	; 189
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e af       	std	Y+62, r25	; 0x3e
    2720:	8d af       	std	Y+61, r24	; 0x3d
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_displayCharacter+0x478>
    2724:	80 e9       	ldi	r24, 0x90	; 144
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	9c af       	std	Y+60, r25	; 0x3c
    272a:	8b af       	std	Y+59, r24	; 0x3b
    272c:	8b ad       	ldd	r24, Y+59	; 0x3b
    272e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x466>
    2734:	9c af       	std	Y+60, r25	; 0x3c
    2736:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8d ad       	ldd	r24, Y+61	; 0x3d
    273a:	9e ad       	ldd	r25, Y+62	; 0x3e
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9e af       	std	Y+62, r25	; 0x3e
    2740:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8d ad       	ldd	r24, Y+61	; 0x3d
    2744:	9e ad       	ldd	r25, Y+62	; 0x3e
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <LCD_displayCharacter+0x45a>
    274a:	16 c0       	rjmp	.+44     	; 0x2778 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	fe 01       	movw	r30, r28
    274e:	ff 96       	adiw	r30, 0x3f	; 63
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e af       	std	Y+62, r25	; 0x3e
    2762:	8d af       	std	Y+61, r24	; 0x3d
    2764:	8d ad       	ldd	r24, Y+61	; 0x3d
    2766:	9e ad       	ldd	r25, Y+62	; 0x3e
    2768:	9a af       	std	Y+58, r25	; 0x3a
    276a:	89 af       	std	Y+57, r24	; 0x39
    276c:	89 ad       	ldd	r24, Y+57	; 0x39
    276e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayCharacter+0x4a6>
    2774:	9a af       	std	Y+58, r25	; 0x3a
    2776:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	62 e0       	ldi	r22, 0x02	; 2
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e8       	ldi	r26, 0x80	; 128
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	8d ab       	std	Y+53, r24	; 0x35
    278c:	9e ab       	std	Y+54, r25	; 0x36
    278e:	af ab       	std	Y+55, r26	; 0x37
    2790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6d a9       	ldd	r22, Y+53	; 0x35
    2794:	7e a9       	ldd	r23, Y+54	; 0x36
    2796:	8f a9       	ldd	r24, Y+55	; 0x37
    2798:	98 ad       	ldd	r25, Y+56	; 0x38
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a e7       	ldi	r20, 0x7A	; 122
    27a0:	55 e4       	ldi	r21, 0x45	; 69
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	89 ab       	std	Y+49, r24	; 0x31
    27ac:	9a ab       	std	Y+50, r25	; 0x32
    27ae:	ab ab       	std	Y+51, r26	; 0x33
    27b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27b2:	69 a9       	ldd	r22, Y+49	; 0x31
    27b4:	7a a9       	ldd	r23, Y+50	; 0x32
    27b6:	8b a9       	ldd	r24, Y+51	; 0x33
    27b8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	98 ab       	std	Y+48, r25	; 0x30
    27d0:	8f a7       	std	Y+47, r24	; 0x2f
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    27d4:	69 a9       	ldd	r22, Y+49	; 0x31
    27d6:	7a a9       	ldd	r23, Y+50	; 0x32
    27d8:	8b a9       	ldd	r24, Y+51	; 0x33
    27da:	9c a9       	ldd	r25, Y+52	; 0x34
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6d a9       	ldd	r22, Y+53	; 0x35
    27ee:	7e a9       	ldd	r23, Y+54	; 0x36
    27f0:	8f a9       	ldd	r24, Y+55	; 0x37
    27f2:	98 ad       	ldd	r25, Y+56	; 0x38
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	98 ab       	std	Y+48, r25	; 0x30
    2812:	8f a7       	std	Y+47, r24	; 0x2f
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_displayCharacter+0x56a>
    2816:	80 e9       	ldi	r24, 0x90	; 144
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	9e a7       	std	Y+46, r25	; 0x2e
    281c:	8d a7       	std	Y+45, r24	; 0x2d
    281e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2820:	9e a5       	ldd	r25, Y+46	; 0x2e
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_displayCharacter+0x558>
    2826:	9e a7       	std	Y+46, r25	; 0x2e
    2828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	8f a5       	ldd	r24, Y+47	; 0x2f
    282c:	98 a9       	ldd	r25, Y+48	; 0x30
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	98 ab       	std	Y+48, r25	; 0x30
    2832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	8f a5       	ldd	r24, Y+47	; 0x2f
    2836:	98 a9       	ldd	r25, Y+48	; 0x30
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_displayCharacter+0x54c>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	69 a9       	ldd	r22, Y+49	; 0x31
    2840:	7a a9       	ldd	r23, Y+50	; 0x32
    2842:	8b a9       	ldd	r24, Y+51	; 0x33
    2844:	9c a9       	ldd	r25, Y+52	; 0x34
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	98 ab       	std	Y+48, r25	; 0x30
    2850:	8f a7       	std	Y+47, r24	; 0x2f
    2852:	8f a5       	ldd	r24, Y+47	; 0x2f
    2854:	98 a9       	ldd	r25, Y+48	; 0x30
    2856:	9c a7       	std	Y+44, r25	; 0x2c
    2858:	8b a7       	std	Y+43, r24	; 0x2b
    285a:	8b a5       	ldd	r24, Y+43	; 0x2b
    285c:	9c a5       	ldd	r25, Y+44	; 0x2c
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_displayCharacter+0x594>
    2862:	9c a7       	std	Y+44, r25	; 0x2c
    2864:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 e8       	ldi	r26, 0x80	; 128
    2876:	bf e3       	ldi	r27, 0x3F	; 63
    2878:	8f a3       	std	Y+39, r24	; 0x27
    287a:	98 a7       	std	Y+40, r25	; 0x28
    287c:	a9 a7       	std	Y+41, r26	; 0x29
    287e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	6f a1       	ldd	r22, Y+39	; 0x27
    2882:	78 a5       	ldd	r23, Y+40	; 0x28
    2884:	89 a5       	ldd	r24, Y+41	; 0x29
    2886:	9a a5       	ldd	r25, Y+42	; 0x2a
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a e7       	ldi	r20, 0x7A	; 122
    288e:	55 e4       	ldi	r21, 0x45	; 69
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8b a3       	std	Y+35, r24	; 0x23
    289a:	9c a3       	std	Y+36, r25	; 0x24
    289c:	ad a3       	std	Y+37, r26	; 0x25
    289e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28a0:	6b a1       	ldd	r22, Y+35	; 0x23
    28a2:	7c a1       	ldd	r23, Y+36	; 0x24
    28a4:	8d a1       	ldd	r24, Y+37	; 0x25
    28a6:	9e a1       	ldd	r25, Y+38	; 0x26
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9a a3       	std	Y+34, r25	; 0x22
    28be:	89 a3       	std	Y+33, r24	; 0x21
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    28c2:	6b a1       	ldd	r22, Y+35	; 0x23
    28c4:	7c a1       	ldd	r23, Y+36	; 0x24
    28c6:	8d a1       	ldd	r24, Y+37	; 0x25
    28c8:	9e a1       	ldd	r25, Y+38	; 0x26
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	6f a1       	ldd	r22, Y+39	; 0x27
    28dc:	78 a5       	ldd	r23, Y+40	; 0x28
    28de:	89 a5       	ldd	r24, Y+41	; 0x29
    28e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9a a3       	std	Y+34, r25	; 0x22
    2900:	89 a3       	std	Y+33, r24	; 0x21
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <LCD_displayCharacter+0x658>
    2904:	80 e9       	ldi	r24, 0x90	; 144
    2906:	91 e0       	ldi	r25, 0x01	; 1
    2908:	98 a3       	std	Y+32, r25	; 0x20
    290a:	8f 8f       	std	Y+31, r24	; 0x1f
    290c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    290e:	98 a1       	ldd	r25, Y+32	; 0x20
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_displayCharacter+0x646>
    2914:	98 a3       	std	Y+32, r25	; 0x20
    2916:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	89 a1       	ldd	r24, Y+33	; 0x21
    291a:	9a a1       	ldd	r25, Y+34	; 0x22
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9a a3       	std	Y+34, r25	; 0x22
    2920:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	89 a1       	ldd	r24, Y+33	; 0x21
    2924:	9a a1       	ldd	r25, Y+34	; 0x22
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <LCD_displayCharacter+0x63a>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	6b a1       	ldd	r22, Y+35	; 0x23
    292e:	7c a1       	ldd	r23, Y+36	; 0x24
    2930:	8d a1       	ldd	r24, Y+37	; 0x25
    2932:	9e a1       	ldd	r25, Y+38	; 0x26
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9a a3       	std	Y+34, r25	; 0x22
    293e:	89 a3       	std	Y+33, r24	; 0x21
    2940:	89 a1       	ldd	r24, Y+33	; 0x21
    2942:	9a a1       	ldd	r25, Y+34	; 0x22
    2944:	9e 8f       	std	Y+30, r25	; 0x1e
    2946:	8d 8f       	std	Y+29, r24	; 0x1d
    2948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    294a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_displayCharacter+0x682>
    2950:	9e 8f       	std	Y+30, r25	; 0x1e
    2952:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2954:	fe 01       	movw	r30, r28
    2956:	ed 59       	subi	r30, 0x9D	; 157
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	98 2f       	mov	r25, r24
    295e:	91 70       	andi	r25, 0x01	; 1
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	63 e0       	ldi	r22, 0x03	; 3
    2964:	49 2f       	mov	r20, r25
    2966:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    296a:	fe 01       	movw	r30, r28
    296c:	ed 59       	subi	r30, 0x9D	; 157
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	82 70       	andi	r24, 0x02	; 2
    2978:	90 70       	andi	r25, 0x00	; 0
    297a:	95 95       	asr	r25
    297c:	87 95       	ror	r24
    297e:	98 2f       	mov	r25, r24
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	64 e0       	ldi	r22, 0x04	; 4
    2984:	49 2f       	mov	r20, r25
    2986:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    298a:	fe 01       	movw	r30, r28
    298c:	ed 59       	subi	r30, 0x9D	; 157
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	84 70       	andi	r24, 0x04	; 4
    2998:	90 70       	andi	r25, 0x00	; 0
    299a:	95 95       	asr	r25
    299c:	87 95       	ror	r24
    299e:	95 95       	asr	r25
    29a0:	87 95       	ror	r24
    29a2:	98 2f       	mov	r25, r24
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	65 e0       	ldi	r22, 0x05	; 5
    29a8:	49 2f       	mov	r20, r25
    29aa:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    29ae:	fe 01       	movw	r30, r28
    29b0:	ed 59       	subi	r30, 0x9D	; 157
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	88 70       	andi	r24, 0x08	; 8
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	95 95       	asr	r25
    29c0:	87 95       	ror	r24
    29c2:	95 95       	asr	r25
    29c4:	87 95       	ror	r24
    29c6:	95 95       	asr	r25
    29c8:	87 95       	ror	r24
    29ca:	98 2f       	mov	r25, r24
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	66 e0       	ldi	r22, 0x06	; 6
    29d0:	49 2f       	mov	r20, r25
    29d2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e8       	ldi	r26, 0x80	; 128
    29dc:	bf e3       	ldi	r27, 0x3F	; 63
    29de:	89 8f       	std	Y+25, r24	; 0x19
    29e0:	9a 8f       	std	Y+26, r25	; 0x1a
    29e2:	ab 8f       	std	Y+27, r26	; 0x1b
    29e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	69 8d       	ldd	r22, Y+25	; 0x19
    29e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4a e7       	ldi	r20, 0x7A	; 122
    29f4:	55 e4       	ldi	r21, 0x45	; 69
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	8d 8b       	std	Y+21, r24	; 0x15
    2a00:	9e 8b       	std	Y+22, r25	; 0x16
    2a02:	af 8b       	std	Y+23, r26	; 0x17
    2a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a06:	6d 89       	ldd	r22, Y+21	; 0x15
    2a08:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9c 8b       	std	Y+20, r25	; 0x14
    2a24:	8b 8b       	std	Y+19, r24	; 0x13
    2a26:	3f c0       	rjmp	.+126    	; 0x2aa6 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a28:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	3f ef       	ldi	r19, 0xFF	; 255
    2a34:	4f e7       	ldi	r20, 0x7F	; 127
    2a36:	57 e4       	ldi	r21, 0x47	; 71
    2a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a3c:	18 16       	cp	r1, r24
    2a3e:	4c f5       	brge	.+82     	; 0x2a92 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a40:	69 8d       	ldd	r22, Y+25	; 0x19
    2a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e2       	ldi	r20, 0x20	; 32
    2a4e:	51 e4       	ldi	r21, 0x41	; 65
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9c 8b       	std	Y+20, r25	; 0x14
    2a66:	8b 8b       	std	Y+19, r24	; 0x13
    2a68:	0f c0       	rjmp	.+30     	; 0x2a88 <LCD_displayCharacter+0x7be>
    2a6a:	80 e9       	ldi	r24, 0x90	; 144
    2a6c:	91 e0       	ldi	r25, 0x01	; 1
    2a6e:	9a 8b       	std	Y+18, r25	; 0x12
    2a70:	89 8b       	std	Y+17, r24	; 0x11
    2a72:	89 89       	ldd	r24, Y+17	; 0x11
    2a74:	9a 89       	ldd	r25, Y+18	; 0x12
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_displayCharacter+0x7ac>
    2a7a:	9a 8b       	std	Y+18, r25	; 0x12
    2a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	9c 8b       	std	Y+20, r25	; 0x14
    2a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	69 f7       	brne	.-38     	; 0x2a6a <LCD_displayCharacter+0x7a0>
    2a90:	14 c0       	rjmp	.+40     	; 0x2aba <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a92:	6d 89       	ldd	r22, Y+21	; 0x15
    2a94:	7e 89       	ldd	r23, Y+22	; 0x16
    2a96:	8f 89       	ldd	r24, Y+23	; 0x17
    2a98:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9c 8b       	std	Y+20, r25	; 0x14
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	98 8b       	std	Y+16, r25	; 0x10
    2aac:	8f 87       	std	Y+15, r24	; 0x0f
    2aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab0:	98 89       	ldd	r25, Y+16	; 0x10
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <LCD_displayCharacter+0x7e8>
    2ab6:	98 8b       	std	Y+16, r25	; 0x10
    2ab8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	62 e0       	ldi	r22, 0x02	; 2
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e8       	ldi	r26, 0x80	; 128
    2aca:	bf e3       	ldi	r27, 0x3F	; 63
    2acc:	8b 87       	std	Y+11, r24	; 0x0b
    2ace:	9c 87       	std	Y+12, r25	; 0x0c
    2ad0:	ad 87       	std	Y+13, r26	; 0x0d
    2ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8f 83       	std	Y+7, r24	; 0x07
    2aee:	98 87       	std	Y+8, r25	; 0x08
    2af0:	a9 87       	std	Y+9, r26	; 0x09
    2af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_displayCharacter+0x8ac>
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_displayCharacter+0x89a>
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <LCD_displayCharacter+0x88e>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_displayCharacter+0x8d6>
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ba8:	cd 59       	subi	r28, 0x9D	; 157
    2baa:	df 4f       	sbci	r29, 0xFF	; 255
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <LCD_displayString+0x6>
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9b 83       	std	Y+3, r25	; 0x03
    2bce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bd0:	19 82       	std	Y+1, r1	; 0x01
    2bd2:	0e c0       	rjmp	.+28     	; 0x2bf0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	fc 01       	movw	r30, r24
    2be0:	e2 0f       	add	r30, r18
    2be2:	f3 1f       	adc	r31, r19
    2be4:	80 81       	ld	r24, Z
    2be6:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_displayCharacter>
		i++;
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	e2 0f       	add	r30, r18
    2bfe:	f3 1f       	adc	r31, r19
    2c00:	80 81       	ld	r24, Z
    2c02:	88 23       	and	r24, r24
    2c04:	39 f7       	brne	.-50     	; 0x2bd4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <LCD_moveCursor+0x6>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <LCD_moveCursor+0x8>
    2c1a:	0f 92       	push	r0
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	8a 83       	std	Y+2, r24	; 0x02
    2c22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	3d 83       	std	Y+5, r19	; 0x05
    2c2c:	2c 83       	std	Y+4, r18	; 0x04
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	9d 81       	ldd	r25, Y+5	; 0x05
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	91 05       	cpc	r25, r1
    2c36:	c1 f0       	breq	.+48     	; 0x2c68 <LCD_moveCursor+0x56>
    2c38:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c3c:	22 30       	cpi	r18, 0x02	; 2
    2c3e:	31 05       	cpc	r19, r1
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <LCD_moveCursor+0x3a>
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	9d 81       	ldd	r25, Y+5	; 0x05
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	61 f0       	breq	.+24     	; 0x2c62 <LCD_moveCursor+0x50>
    2c4a:	19 c0       	rjmp	.+50     	; 0x2c7e <LCD_moveCursor+0x6c>
    2c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c50:	22 30       	cpi	r18, 0x02	; 2
    2c52:	31 05       	cpc	r19, r1
    2c54:	69 f0       	breq	.+26     	; 0x2c70 <LCD_moveCursor+0x5e>
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5a:	83 30       	cpi	r24, 0x03	; 3
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	61 f0       	breq	.+24     	; 0x2c78 <LCD_moveCursor+0x66>
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	0b c0       	rjmp	.+22     	; 0x2c7e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	80 5c       	subi	r24, 0xC0	; 192
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	07 c0       	rjmp	.+14     	; 0x2c7e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	80 5f       	subi	r24, 0xF0	; 240
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	80 5b       	subi	r24, 0xB0	; 176
    2c7c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	80 68       	ori	r24, 0x80	; 128
    2c82:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
}
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <LCD_displayStringRowColumn+0x6>
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <LCD_displayStringRowColumn+0x8>
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	6a 83       	std	Y+2, r22	; 0x02
    2ca6:	5c 83       	std	Y+4, r21	; 0x04
    2ca8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	6a 81       	ldd	r22, Y+2	; 0x02
    2cae:	0e 94 09 16 	call	0x2c12	; 0x2c12 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb6:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <LCD_displayString>
}
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	62 97       	sbiw	r28, 0x12	; 18
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	9a 8b       	std	Y+18, r25	; 0x12
    2cde:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ce0:	89 89       	ldd	r24, Y+17	; 0x11
    2ce2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce4:	9e 01       	movw	r18, r28
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cea:	b9 01       	movw	r22, r18
    2cec:	4a e0       	ldi	r20, 0x0A	; 10
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	0e 94 ab 18 	call	0x3156	; 0x3156 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <LCD_displayString>
}
    2cfc:	62 96       	adiw	r28, 0x12	; 18
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <LCD_sendCommand>
}
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <LEDS_init>:
 * Description :
 * Initializes all Leds (red, green, blue) pins direction.
   Turn off all the Leds
*/
void LEDS_init(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	//Initializes all Leds (red, green, blue) pins direction
	GPIO_setupPinDirection(LEDS_RED_PORT_ID,LEDS_RED_PIN_ID,PIN_OUTPUT);
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDS_GREEN_PORT_ID,LEDS_GREEN_PIN_ID,PIN_OUTPUT);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,PIN_OUTPUT);
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
	// Turn off all the Leds
#ifdef Positive_logic
	GPIO_writePin(LEDS_RED_PORT_ID,LEDS_RED_PIN_ID,LOGIC_LOW);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LEDS_GREEN_PORT_ID,LEDS_GREEN_PIN_ID,LOGIC_LOW);
    2d52:	82 e0       	ldi	r24, 0x02	; 2
    2d54:	61 e0       	ldi	r22, 0x01	; 1
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
	GPIO_writePin(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_LOW);
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
#else
	GPIO_writePin(LEDS_PORT_ID,LEDS_RED_PIN_ID,LOGIC_HIGH);
	GPIO_writePin(LEDS_PORT_ID,LEDS_GREEN_PIN_ID,LOGIC_HIGH);
	GPIO_writePin(LEDS_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_HIGH);
#endif
}
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <LED_on>:
/*
 * Description :
 Turns on the specified LED.
*/
void LED_on(LED_ID id)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <LED_on+0x6>
    2d72:	0f 92       	push	r0
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
#ifdef Positive_logic
	switch(id)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	3b 83       	std	Y+3, r19	; 0x03
    2d82:	2a 83       	std	Y+2, r18	; 0x02
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	9b 81       	ldd	r25, Y+3	; 0x03
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	79 f0       	breq	.+30     	; 0x2dac <LED_on+0x40>
    2d8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d90:	3b 81       	ldd	r19, Y+3	; 0x03
    2d92:	22 30       	cpi	r18, 0x02	; 2
    2d94:	31 05       	cpc	r19, r1
    2d96:	81 f0       	breq	.+32     	; 0x2db8 <LED_on+0x4c>
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	89 f4       	brne	.+34     	; 0x2dc2 <LED_on+0x56>
	{
		case RED:
			GPIO_writePin(LEDS_RED_PORT_ID,LEDS_RED_PIN_ID,LOGIC_HIGH);
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2daa:	0b c0       	rjmp	.+22     	; 0x2dc2 <LED_on+0x56>
			break;
		case GREEN:
			GPIO_writePin(LEDS_GREEN_PORT_ID,LEDS_GREEN_PIN_ID,LOGIC_HIGH);
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <LED_on+0x56>
			break;
		case BLUE:
			GPIO_writePin(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_HIGH);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	62 e0       	ldi	r22, 0x02	; 2
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
		case BLUE:
			GPIO_writePin(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_LOW);
			break;
	}
#endif
}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <LED_off>:
/*
 * Description :
 Turns off the specified LED.
*/
void LED_off(LED_ID id)
{
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LED_off+0x6>
    2dd4:	0f 92       	push	r0
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	89 83       	std	Y+1, r24	; 0x01
#ifdef Positive_logic
	switch(id)
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	3b 83       	std	Y+3, r19	; 0x03
    2de4:	2a 83       	std	Y+2, r18	; 0x02
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	91 05       	cpc	r25, r1
    2dee:	79 f0       	breq	.+30     	; 0x2e0e <LED_off+0x40>
    2df0:	2a 81       	ldd	r18, Y+2	; 0x02
    2df2:	3b 81       	ldd	r19, Y+3	; 0x03
    2df4:	22 30       	cpi	r18, 0x02	; 2
    2df6:	31 05       	cpc	r19, r1
    2df8:	81 f0       	breq	.+32     	; 0x2e1a <LED_off+0x4c>
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	89 f4       	brne	.+34     	; 0x2e24 <LED_off+0x56>
	{
		case RED:
			GPIO_writePin(LEDS_RED_PORT_ID,LEDS_RED_PIN_ID,LOGIC_LOW);
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2e0c:	0b c0       	rjmp	.+22     	; 0x2e24 <LED_off+0x56>
			break;
		case GREEN:
			GPIO_writePin(LEDS_GREEN_PORT_ID,LEDS_GREEN_PIN_ID,LOGIC_LOW);
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2e18:	05 c0       	rjmp	.+10     	; 0x2e24 <LED_off+0x56>
			break;
		case BLUE:
			GPIO_writePin(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_LOW);
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	62 e0       	ldi	r22, 0x02	; 2
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
		case BLUE:
			GPIO_writePin(LEDS_BLUE_PORT_ID,LEDS_BLUE_PIN_ID,LOGIC_HIGH);
			break;
	}
#endif
}
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <Ultrasonic_init>:
▪ Set up the ICU callback function.
▪ Set the direction for the trigger pin as output through
the GPIO driver.
*/
void Ultrasonic_init(void)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <Ultrasonic_init+0x6>
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	ICU_ConfigType ICU_Configurations = {F_CPU_8,RAISING};
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&ICU_Configurations);
    2e42:	ce 01       	movw	r24, r28
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	0e 94 88 0b 	call	0x1710	; 0x1710 <ICU_init>
	/*Set up the ICU callback function.*/
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    2e4a:	8f e4       	ldi	r24, 0x4F	; 79
    2e4c:	98 e1       	ldi	r25, 0x18	; 24
    2e4e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <ICU_setCallBack>
	/*Set the direction for the trigger pin as output through the GPIO driver.*/
	GPIO_setupPinDirection(TRIGGER_PORT_ID,TRIGGER_PIN_ID,PIN_OUTPUT);
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	67 e0       	ldi	r22, 0x07	; 7
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 0e 08 	call	0x101c	; 0x101c <GPIO_setupPinDirection>
}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <Ultrasonic_Trigger>:
/*
 * Description :
 * Send the trigger pulse to the ultrasonic sensor.
*/
void Ultrasonic_Trigger(void)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	68 97       	sbiw	r28, 0x18	; 24
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOGIC_HIGH);
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	67 e0       	ldi	r22, 0x07	; 7
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e2       	ldi	r26, 0x20	; 32
    2e8a:	b1 e4       	ldi	r27, 0x41	; 65
    2e8c:	8d 8b       	std	Y+21, r24	; 0x15
    2e8e:	9e 8b       	std	Y+22, r25	; 0x16
    2e90:	af 8b       	std	Y+23, r26	; 0x17
    2e92:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e94:	6d 89       	ldd	r22, Y+21	; 0x15
    2e96:	7e 89       	ldd	r23, Y+22	; 0x16
    2e98:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9c:	2b ea       	ldi	r18, 0xAB	; 171
    2e9e:	3a ea       	ldi	r19, 0xAA	; 170
    2ea0:	4a ea       	ldi	r20, 0xAA	; 170
    2ea2:	50 e4       	ldi	r21, 0x40	; 64
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	89 8b       	std	Y+17, r24	; 0x11
    2eae:	9a 8b       	std	Y+18, r25	; 0x12
    2eb0:	ab 8b       	std	Y+19, r26	; 0x13
    2eb2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2eb4:	69 89       	ldd	r22, Y+17	; 0x11
    2eb6:	7a 89       	ldd	r23, Y+18	; 0x12
    2eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eba:	9c 89       	ldd	r25, Y+20	; 0x14
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	1c f4       	brge	.+6      	; 0x2ed2 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	88 8b       	std	Y+16, r24	; 0x10
    2ed0:	91 c0       	rjmp	.+290    	; 0x2ff4 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2ed2:	69 89       	ldd	r22, Y+17	; 0x11
    2ed4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	53 e4       	ldi	r21, 0x43	; 67
    2ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	0c f0       	brlt	.+2      	; 0x2eec <Ultrasonic_Trigger+0x86>
    2eea:	7b c0       	rjmp	.+246    	; 0x2fe2 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2eec:	6d 89       	ldd	r22, Y+21	; 0x15
    2eee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a e7       	ldi	r20, 0x7A	; 122
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8c 87       	std	Y+12, r24	; 0x0c
    2f06:	9d 87       	std	Y+13, r25	; 0x0d
    2f08:	ae 87       	std	Y+14, r26	; 0x0e
    2f0a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f12:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a e7       	ldi	r20, 0x7A	; 122
    2f1a:	55 e4       	ldi	r21, 0x45	; 69
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	88 87       	std	Y+8, r24	; 0x08
    2f26:	99 87       	std	Y+9, r25	; 0x09
    2f28:	aa 87       	std	Y+10, r26	; 0x0a
    2f2a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f2c:	68 85       	ldd	r22, Y+8	; 0x08
    2f2e:	79 85       	ldd	r23, Y+9	; 0x09
    2f30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9f 83       	std	Y+7, r25	; 0x07
    2f4a:	8e 83       	std	Y+6, r24	; 0x06
    2f4c:	3f c0       	rjmp	.+126    	; 0x2fcc <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    2f4e:	68 85       	ldd	r22, Y+8	; 0x08
    2f50:	79 85       	ldd	r23, Y+9	; 0x09
    2f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	4c f5       	brge	.+82     	; 0x2fb8 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f68:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9f 83       	std	Y+7, r25	; 0x07
    2f8c:	8e 83       	std	Y+6, r24	; 0x06
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <Ultrasonic_Trigger+0x148>
    2f90:	80 e9       	ldi	r24, 0x90	; 144
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	9d 83       	std	Y+5, r25	; 0x05
    2f96:	8c 83       	std	Y+4, r24	; 0x04
    2f98:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <Ultrasonic_Trigger+0x136>
    2fa0:	9d 83       	std	Y+5, r25	; 0x05
    2fa2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <Ultrasonic_Trigger+0x12a>
    2fb6:	24 c0       	rjmp	.+72     	; 0x3000 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	68 85       	ldd	r22, Y+8	; 0x08
    2fba:	79 85       	ldd	r23, Y+9	; 0x09
    2fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9f 83       	std	Y+7, r25	; 0x07
    2fca:	8e 83       	std	Y+6, r24	; 0x06
    2fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fce:	9f 81       	ldd	r25, Y+7	; 0x07
    2fd0:	9b 83       	std	Y+3, r25	; 0x03
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <Ultrasonic_Trigger+0x172>
    2fdc:	9b 83       	std	Y+3, r25	; 0x03
    2fde:	8a 83       	std	Y+2, r24	; 0x02
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fe2:	69 89       	ldd	r22, Y+17	; 0x11
    2fe4:	7a 89       	ldd	r23, Y+18	; 0x12
    2fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	88 8b       	std	Y+16, r24	; 0x10
    2ff4:	88 89       	ldd	r24, Y+16	; 0x10
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	8a 95       	dec	r24
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <Ultrasonic_Trigger+0x194>
    2ffe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOGIC_LOW);
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	67 e0       	ldi	r22, 0x07	; 7
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GPIO_writePin>
}
    300a:	68 96       	adiw	r28, 0x18	; 24
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <Ultrasonic_readDistance>:
 * Description :
 * Send the trigger pulse by using the Ultrasonic_Trigger function.
▪ Start the measurement process via the ICU driver.
*/
uint16 Ultrasonic_readDistance(void)
{
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	00 d0       	rcall	.+0      	; 0x3022 <Ultrasonic_readDistance+0x6>
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
	uint16 distance=0;
    3026:	1a 82       	std	Y+2, r1	; 0x02
    3028:	19 82       	std	Y+1, r1	; 0x01
	g_timeHigh=0;
    302a:	10 92 8e 01 	sts	0x018E, r1
    302e:	10 92 8d 01 	sts	0x018D, r1
	/*Send the trigger pulse by using the Ultrasonic_Trigger function to start measure.*/
	Ultrasonic_Trigger();
    3032:	0e 94 33 17 	call	0x2e66	; 0x2e66 <Ultrasonic_Trigger>
	/*Start the measurement process via the ICU driver.*/
	//wait to measure
	while(g_edgeCount!=2)
    3036:	80 91 8c 01 	lds	r24, 0x018C
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	e1 f7       	brne	.-8      	; 0x3036 <Ultrasonic_readDistance+0x1a>
	{}
	 //+1 is added to adjust calibration with proteus simulation
	distance = (uint16)((float32)g_timeHigh/117.647)+1;
    303e:	80 91 8d 01 	lds	r24, 0x018D
    3042:	90 91 8e 01 	lds	r25, 0x018E
    3046:	cc 01       	movw	r24, r24
    3048:	a0 e0       	ldi	r26, 0x00	; 0
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	24 e4       	ldi	r18, 0x44	; 68
    305e:	3b e4       	ldi	r19, 0x4B	; 75
    3060:	4b ee       	ldi	r20, 0xEB	; 235
    3062:	52 e4       	ldi	r21, 0x42	; 66
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
	//remove added one for calibration
	if(distance<3)
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	83 30       	cpi	r24, 0x03	; 3
    3084:	91 05       	cpc	r25, r1
    3086:	10 f4       	brcc	.+4      	; 0x308c <Ultrasonic_readDistance+0x70>
	{
		distance=0;
    3088:	1a 82       	std	Y+2, r1	; 0x02
    308a:	19 82       	std	Y+1, r1	; 0x01
	}
	g_edgeCount=0; 	// to be ready to measure again
    308c:	10 92 8c 01 	sts	0x018C, r1
	return distance;
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <Ultrasonic_edgeProcessing>:
 * Description :
 * This is the callback function called by the ICU driver.
▪ It calculates the high time (pulse time) generated by the ultrasonic sensor.
*/
void Ultrasonic_edgeProcessing(void)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    30a6:	80 91 8c 01 	lds	r24, 0x018C
    30aa:	8f 5f       	subi	r24, 0xFF	; 255
    30ac:	80 93 8c 01 	sts	0x018C, r24
	if(g_edgeCount == 1)
    30b0:	80 91 8c 01 	lds	r24, 0x018C
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	31 f4       	brne	.+12     	; 0x30c4 <Ultrasonic_edgeProcessing+0x26>
	{
		//Clear time to start measure pulse time
		ICU_clearTimerValue();
    30b8:	0e 94 0d 0c 	call	0x181a	; 0x181a <ICU_clearTimerValue>
		//Change to falling edge to detect it
		ICU_setEdgeDetectionType(FALLING);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <ICU_setEdgeDetectionType>
    30c2:	0f c0       	rjmp	.+30     	; 0x30e2 <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
    30c4:	80 91 8c 01 	lds	r24, 0x018C
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	59 f4       	brne	.+22     	; 0x30e2 <Ultrasonic_edgeProcessing+0x44>
	{
		//Get the measured time
		g_timeHigh = ICU_getInputCaptureValue();
    30cc:	0e 94 02 0c 	call	0x1804	; 0x1804 <ICU_getInputCaptureValue>
    30d0:	90 93 8e 01 	sts	0x018E, r25
    30d4:	80 93 8d 01 	sts	0x018D, r24
		//Clear time to be ready to measure again
		ICU_clearTimerValue();
    30d8:	0e 94 0d 0c 	call	0x181a	; 0x181a <ICU_clearTimerValue>
		//Change to raising edge to be ready to measure again
		ICU_setEdgeDetectionType(RAISING);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <ICU_setEdgeDetectionType>
	}
}
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <__prologue_saves__>:
    30e8:	2f 92       	push	r2
    30ea:	3f 92       	push	r3
    30ec:	4f 92       	push	r4
    30ee:	5f 92       	push	r5
    30f0:	6f 92       	push	r6
    30f2:	7f 92       	push	r7
    30f4:	8f 92       	push	r8
    30f6:	9f 92       	push	r9
    30f8:	af 92       	push	r10
    30fa:	bf 92       	push	r11
    30fc:	cf 92       	push	r12
    30fe:	df 92       	push	r13
    3100:	ef 92       	push	r14
    3102:	ff 92       	push	r15
    3104:	0f 93       	push	r16
    3106:	1f 93       	push	r17
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	ca 1b       	sub	r28, r26
    3112:	db 0b       	sbc	r29, r27
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	09 94       	ijmp

00003120 <__epilogue_restores__>:
    3120:	2a 88       	ldd	r2, Y+18	; 0x12
    3122:	39 88       	ldd	r3, Y+17	; 0x11
    3124:	48 88       	ldd	r4, Y+16	; 0x10
    3126:	5f 84       	ldd	r5, Y+15	; 0x0f
    3128:	6e 84       	ldd	r6, Y+14	; 0x0e
    312a:	7d 84       	ldd	r7, Y+13	; 0x0d
    312c:	8c 84       	ldd	r8, Y+12	; 0x0c
    312e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3130:	aa 84       	ldd	r10, Y+10	; 0x0a
    3132:	b9 84       	ldd	r11, Y+9	; 0x09
    3134:	c8 84       	ldd	r12, Y+8	; 0x08
    3136:	df 80       	ldd	r13, Y+7	; 0x07
    3138:	ee 80       	ldd	r14, Y+6	; 0x06
    313a:	fd 80       	ldd	r15, Y+5	; 0x05
    313c:	0c 81       	ldd	r16, Y+4	; 0x04
    313e:	1b 81       	ldd	r17, Y+3	; 0x03
    3140:	aa 81       	ldd	r26, Y+2	; 0x02
    3142:	b9 81       	ldd	r27, Y+1	; 0x01
    3144:	ce 0f       	add	r28, r30
    3146:	d1 1d       	adc	r29, r1
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61
    3152:	ed 01       	movw	r28, r26
    3154:	08 95       	ret

00003156 <itoa>:
    3156:	fb 01       	movw	r30, r22
    3158:	9f 01       	movw	r18, r30
    315a:	e8 94       	clt
    315c:	42 30       	cpi	r20, 0x02	; 2
    315e:	c4 f0       	brlt	.+48     	; 0x3190 <itoa+0x3a>
    3160:	45 32       	cpi	r20, 0x25	; 37
    3162:	b4 f4       	brge	.+44     	; 0x3190 <itoa+0x3a>
    3164:	4a 30       	cpi	r20, 0x0A	; 10
    3166:	29 f4       	brne	.+10     	; 0x3172 <itoa+0x1c>
    3168:	97 fb       	bst	r25, 7
    316a:	1e f4       	brtc	.+6      	; 0x3172 <itoa+0x1c>
    316c:	90 95       	com	r25
    316e:	81 95       	neg	r24
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	64 2f       	mov	r22, r20
    3174:	77 27       	eor	r23, r23
    3176:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__udivmodhi4>
    317a:	80 5d       	subi	r24, 0xD0	; 208
    317c:	8a 33       	cpi	r24, 0x3A	; 58
    317e:	0c f0       	brlt	.+2      	; 0x3182 <itoa+0x2c>
    3180:	89 5d       	subi	r24, 0xD9	; 217
    3182:	81 93       	st	Z+, r24
    3184:	cb 01       	movw	r24, r22
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	a1 f7       	brne	.-24     	; 0x3172 <itoa+0x1c>
    318a:	16 f4       	brtc	.+4      	; 0x3190 <itoa+0x3a>
    318c:	5d e2       	ldi	r21, 0x2D	; 45
    318e:	51 93       	st	Z+, r21
    3190:	10 82       	st	Z, r1
    3192:	c9 01       	movw	r24, r18
    3194:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <strrev>

00003198 <strrev>:
    3198:	dc 01       	movw	r26, r24
    319a:	fc 01       	movw	r30, r24
    319c:	67 2f       	mov	r22, r23
    319e:	71 91       	ld	r23, Z+
    31a0:	77 23       	and	r23, r23
    31a2:	e1 f7       	brne	.-8      	; 0x319c <strrev+0x4>
    31a4:	32 97       	sbiw	r30, 0x02	; 2
    31a6:	04 c0       	rjmp	.+8      	; 0x31b0 <strrev+0x18>
    31a8:	7c 91       	ld	r23, X
    31aa:	6d 93       	st	X+, r22
    31ac:	70 83       	st	Z, r23
    31ae:	62 91       	ld	r22, -Z
    31b0:	ae 17       	cp	r26, r30
    31b2:	bf 07       	cpc	r27, r31
    31b4:	c8 f3       	brcs	.-14     	; 0x31a8 <strrev+0x10>
    31b6:	08 95       	ret

000031b8 <__udivmodhi4>:
    31b8:	aa 1b       	sub	r26, r26
    31ba:	bb 1b       	sub	r27, r27
    31bc:	51 e1       	ldi	r21, 0x11	; 17
    31be:	07 c0       	rjmp	.+14     	; 0x31ce <__udivmodhi4_ep>

000031c0 <__udivmodhi4_loop>:
    31c0:	aa 1f       	adc	r26, r26
    31c2:	bb 1f       	adc	r27, r27
    31c4:	a6 17       	cp	r26, r22
    31c6:	b7 07       	cpc	r27, r23
    31c8:	10 f0       	brcs	.+4      	; 0x31ce <__udivmodhi4_ep>
    31ca:	a6 1b       	sub	r26, r22
    31cc:	b7 0b       	sbc	r27, r23

000031ce <__udivmodhi4_ep>:
    31ce:	88 1f       	adc	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	5a 95       	dec	r21
    31d4:	a9 f7       	brne	.-22     	; 0x31c0 <__udivmodhi4_loop>
    31d6:	80 95       	com	r24
    31d8:	90 95       	com	r25
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	08 95       	ret

000031e0 <_exit>:
    31e0:	f8 94       	cli

000031e2 <__stop_program>:
    31e2:	ff cf       	rjmp	.-2      	; 0x31e2 <__stop_program>
